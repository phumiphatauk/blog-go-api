// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: tag.sql

package db

import (
	"context"
	"time"
)

const countAllTag = `-- name: CountAllTag :one
SELECT COUNT(1) AS count
FROM tag
WHERE deleted IS FALSE
AND LOWER(name) LIKE '%' || LOWER($1) || '%' 
LIMIT 1
`

func (q *Queries) CountAllTag(ctx context.Context, lower string) (int64, error) {
	row := q.db.QueryRow(ctx, countAllTag, lower)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tag
(name, created_at)
VALUES ($1, NOW()::TIMESTAMPTZ)
RETURNING id, name, created_at, updated_at, deleted
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
UPDATE tag
SET updated_at = NOW()::TIMESTAMPTZ,
deleted = TRUE
WHERE deleted IS FALSE
AND id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const getAllTag = `-- name: GetAllTag :many
SELECT
id, name
FROM tag
WHERE deleted IS FALSE
AND LOWER(name) LIKE '%' || LOWER($1) || '%'
ORDER BY name ASC
OFFSET $2
LIMIT $3
`

type GetAllTagParams struct {
	Lower  string `json:"lower"`
	Offset int32  `json:"offset"`
	Limit  int32  `json:"limit"`
}

type GetAllTagRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAllTag(ctx context.Context, arg GetAllTagParams) ([]GetAllTagRow, error) {
	rows, err := q.db.Query(ctx, getAllTag, arg.Lower, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTagRow{}
	for rows.Next() {
		var i GetAllTagRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagByCreatedAt = `-- name: GetTagByCreatedAt :many
SELECT
id, name
FROM tag
WHERE deleted IS FALSE
AND created_at = $1
ORDER BY name ASC
`

type GetTagByCreatedAtRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetTagByCreatedAt(ctx context.Context, createdAt time.Time) ([]GetTagByCreatedAtRow, error) {
	rows, err := q.db.Query(ctx, getTagByCreatedAt, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagByCreatedAtRow{}
	for rows.Next() {
		var i GetTagByCreatedAtRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagById = `-- name: GetTagById :one
SELECT
id, name
FROM tag
WHERE deleted IS FALSE
AND id = $1
LIMIT 1
`

type GetTagByIdRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetTagById(ctx context.Context, id int64) (GetTagByIdRow, error) {
	row := q.db.QueryRow(ctx, getTagById, id)
	var i GetTagByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tag
SET name = $2,
updated_at = NOW()::TIMESTAMPTZ
WHERE deleted IS FALSE
AND id = $1
`

type UpdateTagParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag, arg.ID, arg.Name)
	return err
}
