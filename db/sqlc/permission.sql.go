// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: permission.sql

package db

import (
	"context"
)

const getPermissionByPermissionGroupId = `-- name: GetPermissionByPermissionGroupId :many
SELECT
id, name
FROM permission
WHERE permission_group_id = $1
`

type GetPermissionByPermissionGroupIdRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetPermissionByPermissionGroupId(ctx context.Context, permissionGroupID int64) ([]GetPermissionByPermissionGroupIdRow, error) {
	rows, err := q.db.Query(ctx, getPermissionByPermissionGroupId, permissionGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPermissionByPermissionGroupIdRow{}
	for rows.Next() {
		var i GetPermissionByPermissionGroupIdRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByPermissionGroupIdAndRoleId = `-- name: GetPermissionByPermissionGroupIdAndRoleId :many
SELECT
p.id,
p.name,
CASE WHEN rp.id IS NOT NULL THEN TRUE ELSE FALSE END AS is_assigned
FROM permission p
LEFT JOIN role_permission rp ON p.id = rp.permission_id AND rp.deleted IS FALSE AND rp.role_id = $1
WHERE permission_group_id = $2
`

type GetPermissionByPermissionGroupIdAndRoleIdParams struct {
	RoleID            int64 `json:"role_id"`
	PermissionGroupID int64 `json:"permission_group_id"`
}

type GetPermissionByPermissionGroupIdAndRoleIdRow struct {
	ID         int64  `json:"id"`
	Name       string `json:"name"`
	IsAssigned bool   `json:"is_assigned"`
}

func (q *Queries) GetPermissionByPermissionGroupIdAndRoleId(ctx context.Context, arg GetPermissionByPermissionGroupIdAndRoleIdParams) ([]GetPermissionByPermissionGroupIdAndRoleIdRow, error) {
	rows, err := q.db.Query(ctx, getPermissionByPermissionGroupIdAndRoleId, arg.RoleID, arg.PermissionGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPermissionByPermissionGroupIdAndRoleIdRow{}
	for rows.Next() {
		var i GetPermissionByPermissionGroupIdAndRoleIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.IsAssigned); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByUserId = `-- name: GetPermissionByUserId :many
SELECT 
DISTINCT
p.code
FROM permission p
INNER JOIN permission_group pg ON p.permission_group_id = pg.id
INNER JOIN role_permission rp ON p.id = rp.permission_id AND rp.deleted IS FALSE
INNER JOIN role r ON rp.role_id = r.id AND r.deleted IS FALSE
INNER JOIN user_role ur ON r.id = ur.role_id AND ur.deleted IS FALSE
INNER JOIN users u ON ur.user_id = u.id AND u.deleted IS FALSE
WHERE u.id = $1
`

func (q *Queries) GetPermissionByUserId(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getPermissionByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
