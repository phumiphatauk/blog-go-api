// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(1) AS "UserCount" 
FROM users 
WHERE deleted IS False
LIMIT 1
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUser)
	var UserCount int64
	err := row.Scan(&UserCount)
	return UserCount, err
}

const countUserForGenerateCode = `-- name: CountUserForGenerateCode :one
SELECT COUNT(1) AS "UserCount" 
FROM users
LIMIT 1
`

func (q *Queries) CountUserForGenerateCode(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUserForGenerateCode)
	var UserCount int64
	err := row.Scan(&UserCount)
	return UserCount, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  code,
  username,
  first_name,
  last_name,
  email,
  phone,
  description,
  hashed_password
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, code, username, first_name, last_name, email, phone, description, hashed_password, password_changed_at, created_at, updated_at, deleted
`

type CreateUserParams struct {
	Code           string      `json:"code"`
	Username       string      `json:"username"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Email          string      `json:"email"`
	Phone          string      `json:"phone"`
	Description    pgtype.Text `json:"description"`
	HashedPassword string      `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Code,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Description,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Description,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted = True,
updated_at = NOW()
WHERE id = $1
AND deleted IS False
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id,
code,
first_name,
last_name,
username,
email,
phone,
description
FROM users
WHERE id = $1 
AND deleted IS False
LIMIT 1
`

type GetUserRow struct {
	ID          int64       `json:"id"`
	Code        string      `json:"code"`
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	Username    string      `json:"username"`
	Email       string      `json:"email"`
	Phone       string      `json:"phone"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Description,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, code, username, first_name, last_name, email, phone, description, hashed_password, password_changed_at, created_at, updated_at, deleted FROM users
WHERE email = $1
AND deleted IS False
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Description,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, code, username, first_name, last_name, email, phone, description, hashed_password, password_changed_at, created_at, updated_at, deleted FROM users
WHERE username = $1
AND deleted IS False
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Description,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const getUserHashedPassword = `-- name: GetUserHashedPassword :one
SELECT hashed_password
FROM users
WHERE id = $1
AND deleted IS False
`

func (q *Queries) GetUserHashedPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getUserHashedPassword, id)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const listUsers = `-- name: ListUsers :many
SELECT id,
code,
first_name,
last_name,
email,
phone,
description,
created_at,
updated_at
FROM users
WHERE deleted IS False
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          int64              `json:"id"`
	Code        string             `json:"code"`
	FirstName   string             `json:"first_name"`
	LastName    string             `json:"last_name"`
	Email       string             `json:"email"`
	Phone       string             `json:"phone"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  email = COALESCE($3, email),
  phone = COALESCE($4, phone),
  description = COALESCE($5, description),
  -- hashed_password = COALESCE(sqlc.narg(hashed_password), hashed_password),
  -- password_changed_at = COALESCE(sqlc.narg(password_changed_at), password_changed_at),
  updated_at = NOW()::TIMESTAMP
WHERE
  id = $6 AND deleted IS False
RETURNING id, code, username, first_name, last_name, email, phone, description, hashed_password, password_changed_at, created_at, updated_at, deleted
`

type UpdateUserParams struct {
	FirstName   pgtype.Text `json:"first_name"`
	LastName    pgtype.Text `json:"last_name"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
	UserID      int64       `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Description,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Description,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
  hashed_password = $2,
  password_changed_at = NOW()::TIMESTAMP,
  updated_at = NOW()::TIMESTAMP
WHERE
  id = $1
  AND deleted IS False
`

type UpdateUserPasswordParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	return err
}
