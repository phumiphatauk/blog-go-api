// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: role_permission.sql

package db

import (
	"context"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO "role_permission" (role_id, permission_id, created_at, updated_at, deleted)
VALUES ($1, $2, NOW()::TIMESTAMP, NULL, FALSE)
RETURNING id, role_id, permission_id, created_at, updated_at, deleted
`

type CreateRolePermissionParams struct {
	RoleID       int64 `json:"role_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, createRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PermissionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
UPDATE "role_permission"
SET updated_at = NOW()::TIMESTAMP,
deleted = TRUE
WHERE deleted IS False
AND role_id = $1
AND permission_id = $2
`

type DeleteRolePermissionParams struct {
	RoleID       int64 `json:"role_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) error {
	_, err := q.db.Exec(ctx, deleteRolePermission, arg.RoleID, arg.PermissionID)
	return err
}

const deleteRolePermissionByRoleId = `-- name: DeleteRolePermissionByRoleId :exec
UPDATE "role_permission"
SET updated_at = NOW()::TIMESTAMP,
deleted = TRUE
WHERE role_id = $1
`

func (q *Queries) DeleteRolePermissionByRoleId(ctx context.Context, roleID int64) error {
	_, err := q.db.Exec(ctx, deleteRolePermissionByRoleId, roleID)
	return err
}

const getRolePermissionByRoleIdAndPermissionId = `-- name: GetRolePermissionByRoleIdAndPermissionId :one
SELECT
id, role_id, permission_id, created_at, updated_at, deleted
FROM "role_permission"
WHERE deleted IS False 
AND role_id = $1
AND permission_id = $2
LIMIT 1
`

type GetRolePermissionByRoleIdAndPermissionIdParams struct {
	RoleID       int64 `json:"role_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) GetRolePermissionByRoleIdAndPermissionId(ctx context.Context, arg GetRolePermissionByRoleIdAndPermissionIdParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, getRolePermissionByRoleIdAndPermissionId, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PermissionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}
