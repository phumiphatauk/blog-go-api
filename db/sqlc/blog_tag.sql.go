// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: blog_tag.sql

package db

import (
	"context"
)

const createBlogTag = `-- name: CreateBlogTag :exec
INSERT INTO blog_tag
(blog_id, tag_id, created_at)
VALUES
($1, $2, NOW()::TIMESTAMP)
`

type CreateBlogTagParams struct {
	BlogID int64 `json:"blog_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) CreateBlogTag(ctx context.Context, arg CreateBlogTagParams) error {
	_, err := q.db.Exec(ctx, createBlogTag, arg.BlogID, arg.TagID)
	return err
}

const deleteBlogTag = `-- name: DeleteBlogTag :exec
UPDATE blog_tag
SET deleted = True,
updated_at = NOW()::TIMESTAMP
WHERE blog_id = $1
AND tag_id = $2
`

type DeleteBlogTagParams struct {
	BlogID int64 `json:"blog_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) DeleteBlogTag(ctx context.Context, arg DeleteBlogTagParams) error {
	_, err := q.db.Exec(ctx, deleteBlogTag, arg.BlogID, arg.TagID)
	return err
}

const deleteBlogTagByBlogId = `-- name: DeleteBlogTagByBlogId :exec
UPDATE blog_tag
SET deleted = True,
updated_at = NOW()::TIMESTAMP
WHERE blog_id = $1
`

func (q *Queries) DeleteBlogTagByBlogId(ctx context.Context, blogID int64) error {
	_, err := q.db.Exec(ctx, deleteBlogTagByBlogId, blogID)
	return err
}

const getBlogTagByBlogId = `-- name: GetBlogTagByBlogId :many
SELECT
bt.id,
bt.blog_id,
bt.tag_id,
t.name,
bt.deleted
FROM blog_tag bt
INNER JOIN tag t ON bt.tag_id = t.id AND t.deleted IS FALSE
WHERE bt.deleted IS FALSE
AND blog_id = $1
`

type GetBlogTagByBlogIdRow struct {
	ID      int64  `json:"id"`
	BlogID  int64  `json:"blog_id"`
	TagID   int64  `json:"tag_id"`
	Name    string `json:"name"`
	Deleted bool   `json:"deleted"`
}

func (q *Queries) GetBlogTagByBlogId(ctx context.Context, blogID int64) ([]GetBlogTagByBlogIdRow, error) {
	rows, err := q.db.Query(ctx, getBlogTagByBlogId, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBlogTagByBlogIdRow{}
	for rows.Next() {
		var i GetBlogTagByBlogIdRow
		if err := rows.Scan(
			&i.ID,
			&i.BlogID,
			&i.TagID,
			&i.Name,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogTagByBlogIdAndTagId = `-- name: GetBlogTagByBlogIdAndTagId :one
SELECT
id, blog_id, tag_id, created_at, updated_at, deleted
FROM blog_tag
WHERE deleted IS FALSE
AND blog_id = $1
AND tag_id = $2
LIMIT 1
`

type GetBlogTagByBlogIdAndTagIdParams struct {
	BlogID int64 `json:"blog_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) GetBlogTagByBlogIdAndTagId(ctx context.Context, arg GetBlogTagByBlogIdAndTagIdParams) (BlogTag, error) {
	row := q.db.QueryRow(ctx, getBlogTagByBlogIdAndTagId, arg.BlogID, arg.TagID)
	var i BlogTag
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.TagID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}
