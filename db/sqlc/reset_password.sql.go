// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: reset_password.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResetPassword = `-- name: CreateResetPassword :one
INSERT INTO reset_password (
    user_id,
    token,
    expires_at
) VALUES (
$1, $2, $3
) RETURNING id, user_id, token, expires_at, used, created_at
`

type CreateResetPasswordParams struct {
	UserID    int64            `json:"user_id"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateResetPassword(ctx context.Context, arg CreateResetPasswordParams) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, createResetPassword, arg.UserID, arg.Token, arg.ExpiresAt)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const getResetPasswordByToken = `-- name: GetResetPasswordByToken :one
SELECT id, user_id, token, expires_at, used, created_at FROM reset_password
WHERE token = $1
AND used IS FALSE
`

func (q *Queries) GetResetPasswordByToken(ctx context.Context, token string) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, getResetPasswordByToken, token)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const useResetPassword = `-- name: UseResetPassword :exec
UPDATE reset_password
SET used = TRUE
WHERE token = $1
`

func (q *Queries) UseResetPassword(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, useResetPassword, token)
	return err
}
